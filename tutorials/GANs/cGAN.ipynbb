{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4fc34219",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import os\n",
    "import json\n",
    "import itertools\n",
    "import pickle\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime, timedelta\n",
    "import collections\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10e3e196",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "import tsgm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0b9d254",
   "metadata": {},
   "outputs": [],
   "source": [
    "latent_dim = 64\n",
    "num_classes = 2\n",
    "feature_dim = 1\n",
    "seq_len = 100\n",
    "batch_size = 128\n",
    "\n",
    "\n",
    "generator_in_channels = latent_dim + num_classes\n",
    "discriminator_in_channels = feature_dim + num_classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30f772ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "discriminator = keras.Sequential([\n",
    "        keras.layers.InputLayer((seq_len, discriminator_in_channels)),\n",
    "        layers.Conv1D(64, 3, strides=2, padding=\"same\"),\n",
    "        layers.LeakyReLU(alpha=0.2),\n",
    "        layers.Dropout(rate=0.2),\n",
    "        layers.Conv1D(128, 3, strides=2, padding=\"same\"),\n",
    "        layers.LeakyReLU(alpha=0.2),\n",
    "        layers.Dropout(rate=0.2),\n",
    "        layers.Conv1D(128, 3, strides=2, padding=\"same\"),\n",
    "        layers.LeakyReLU(alpha=0.2),\n",
    "        layers.Dropout(rate=0.2),\n",
    "        layers.Conv1D(128, 3, strides=2, padding=\"same\"),\n",
    "        layers.LeakyReLU(alpha=0.2),\n",
    "        layers.Dropout(rate=0.2),\n",
    "        layers.LSTM(32, return_sequences=True),\n",
    "        layers.GlobalAvgPool1D(),\n",
    "        layers.Dense(1, activation=\"sigmoid\"),\n",
    "    ],\n",
    "    name=\"discriminator\",\n",
    ")\n",
    "discriminator.summary()\n",
    "\n",
    "g_input = keras.Input((generator_in_channels,))\n",
    "x = layers.Dense(8 * 8 * seq_len)(g_input)\n",
    "x = layers.LeakyReLU(alpha=0.2)(x)\n",
    "x = layers.Reshape((seq_len, 64))(x)\n",
    "x = layers.Conv1DTranspose(128, 4, strides=2, padding=\"same\")(x)\n",
    "x = layers.LeakyReLU(alpha=0.2)(x)\n",
    "x = layers.Conv1DTranspose(128, 4, strides=2, padding=\"same\")(x)\n",
    "x = layers.LeakyReLU(alpha=0.2)(x)\n",
    "x = layers.Conv1DTranspose(128, 4, strides=2, padding=\"same\")(x)\n",
    "x = layers.LeakyReLU(alpha=0.2)(x)\n",
    "x = layers.Conv1DTranspose(128, 4, strides=2, padding=\"same\")(x)\n",
    "x = layers.LeakyReLU(alpha=0.2)(x)\n",
    "x = layers.Conv1D(1, 8, padding=\"same\")(x)\n",
    "x = layers.LSTM(256, return_sequences=True)(x)\n",
    "\n",
    "pool_and_stride = round((x.shape[1] + 1) / (seq_len + 1))\n",
    "\n",
    "x = layers.AveragePooling1D(pool_size=pool_and_stride, strides=pool_and_stride)(x)\n",
    "g_output = layers.LocallyConnected1D(1, 1, activation=\"tanh\")(x)\n",
    "\n",
    "generator = keras.Model(g_input, g_output, name=\"generator\")\n",
    "generator.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18694aeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y_i = tsgm.utils.gen_sine_vs_const_dataset(5_000, seq_len, 1, max_value=20, const=10)\n",
    "\n",
    "scaler = tsgm.utils.TSFeatureWiseScaler((-1, 1))\n",
    "X_train = scaler.fit_transform(X)\n",
    "y = keras.utils.to_categorical(y_i, 2)\n",
    "\n",
    "X_train = X_train.astype(np.float32)\n",
    "y = y.astype(np.float32)\n",
    "\n",
    "dataset = tf.data.Dataset.from_tensor_slices((X_train, y))\n",
    "dataset = dataset.shuffle(buffer_size=1024).batch(batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb6c55dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "tsgm.utils.visualize_ts_lineplot(X_train, y_i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34d5bfa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "cond_gan = tsgm.models.cgan.ConditionalGAN(\n",
    "    discriminator=discriminator, generator=generator, latent_dim=latent_dim\n",
    ")\n",
    "cond_gan.compile(\n",
    "    d_optimizer=keras.optimizers.Adam(learning_rate=0.0002, beta_1=0.5),\n",
    "    g_optimizer=keras.optimizers.Adam(learning_rate=0.0002, beta_1=0.5),\n",
    "    loss_fn=keras.losses.BinaryCrossentropy(),\n",
    ")\n",
    "\n",
    "cbk = tsgm.models.monitors.GANMonitor(num_samples=3, latent_dim=latent_dim, save=False, save_path=\"/tmp\")\n",
    "cond_gan.fit(dataset, epochs=1000, callbacks=[cbk])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34842368",
   "metadata": {},
   "outputs": [],
   "source": [
    "cbk = tsgm.models.monitors.GANMonitor(num_samples=3, latent_dim=latent_dim, save=False, save_path=\"/tmp\")\n",
    "cond_gan.fit(dataset, epochs=1, callbacks=[cbk])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0252943",
   "metadata": {},
   "source": [
    "## Visualize TSNE:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b76db96f",
   "metadata": {},
   "outputs": [],
   "source": [
    "limit = 500\n",
    "X_gen = cond_gan.generate(y[:limit])\n",
    "X_gen = X_gen.numpy()\n",
    "y_gen = y[:limit]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19d931d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "tsgm.utils.visualize_tsne(X_train[:limit], y[:limit], X_gen, y_gen)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
